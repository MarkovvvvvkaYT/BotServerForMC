import telebot
from telebot import types
from javascript import require, On
import time
import sqlite3
import json

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = '7610642746:AAH6a96m_EpRpwB5GSB9gxrJZCQjMebe_7U'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ mineflayer —á–µ—Ä–µ–∑ javascript.require
mineflayer = require('mineflayer')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
mineBot = None
server_list = {}  # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤: {user_id: {"host": "–∞–¥—Ä–µ—Å", "port": "–ø–æ—Ä—Ç"}}
last_message_time = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∏–≥—Ä–µ
track_chat = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —á–∞—Ç–∞
chat_users = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∫–ª—é—á–∏–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —á–∞—Ç–∞

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('servers.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS servers
                  (user_id INTEGER, server_data TEXT)''')
conn.commit()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_servers(user_id):
    cursor.execute("SELECT server_data FROM servers WHERE user_id = ?", (user_id,))
    rows = cursor.fetchall()
    server_list[user_id] = [json.loads(row[0]) for row in rows]

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_server(user_id, server_data):
    cursor.execute("INSERT INTO servers (user_id, server_data) VALUES (?, ?)",
                   (user_id, json.dumps(server_data)))
    conn.commit()

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def delete_server(user_id, server_data):
    cursor.execute("DELETE FROM servers WHERE user_id = ? AND server_data = ?",
                   (user_id, json.dumps(server_data)))
    conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    load_servers(user_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('/BotStart üöÄ'))
    markup.add(types.KeyboardButton('/BotStop üõë'))
    markup.add(types.KeyboardButton('/Servers üåê'))
    markup.add(types.KeyboardButton('/ChangeNick üë§'))
    markup.add(types.KeyboardButton('/SendMessage üì®'))
    markup.add(types.KeyboardButton('/GetCoordinates üìç'))
    markup.add(types.KeyboardButton('/GetPlayers üë•'))
    markup.add(types.KeyboardButton('/GetStatus üìä'))
    markup.add(types.KeyboardButton('/Help ‚ùì'))

    come_mess = f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!'
    bot_comm = (
        'üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
        'üöÄ /BotStart - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n'
        'üõë /BotStop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞.\n'
        'üåê /Servers - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏.\n'
        'üë§ /ChangeNick - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –±–æ—Ç–∞.\n'
        'üì® /SendMessage - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.\n'
        'üìç /GetCoordinates - —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.\n'
        'üë• /GetPlayers - —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n'
        'üìä /GetStatus - —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n'
        '‚ùì /Help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.'
    )
    bot.send_message(message.chat.id, come_mess, reply_markup=markup)
    bot.send_message(message.chat.id, bot_comm, parse_mode='html')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /BotStart
@bot.message_handler(commands=['BotStart'])
def bot_start(message):
    global mineBot
    user_id = message.from_user.id

    if user_id not in server_list or not server_list[user_id]:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /Servers.")
        return

    server = server_list[user_id][0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
    bot.send_message(message.chat.id, 'üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...')

    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ Minecraft
    mineBot = mineflayer.createBot({
        'host': server["host"],
        'port': server["port"],
        'username': server.get("username", "BotServer"),
        'version': False
    })

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    @On(mineBot, 'login')
    def handle_login(*args):
        bot.send_message(message.chat.id, '‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Minecraft!')
        last_message_time[user_id] = time.time()  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    @On(mineBot, 'error')
    def handle_error(err, *args):
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {err}')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ Minecraft
    @On(mineBot, 'chat')
    def handle_chat(username, message, *args):
        if track_chat:
            for user_id in chat_users:
                bot.send_message(user_id, f"üí¨ <b>{username}</b>: {message}", parse_mode='html')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /BotStop
@bot.message_handler(commands=['BotStop'])
def bot_stop(message):
    global mineBot
    if mineBot:
        bot.send_message(message.chat.id, 'üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...')
        mineBot.quit()
        mineBot = None
        bot.send_message(message.chat.id, '‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
    else:
        bot.send_message(message.chat.id, '‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /Servers
@bot.message_handler(commands=['Servers'])
def servers_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üåê –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö", callback_data="select_server"))
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="add_server"))
    markup.add(types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="delete_server"))
    bot.send_message(message.chat.id, "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è /Servers
@bot.callback_query_handler(func=lambda call: call.data in ["select_server", "add_server", "delete_server"])
def servers_callback(call):
    user_id = call.from_user.id
    if call.data == "select_server":
        if user_id in server_list and server_list[user_id]:
            markup = types.InlineKeyboardMarkup()
            for server in server_list[user_id]:
                server_str = f"{server['host']}:{server['port']}"
                markup.add(types.InlineKeyboardButton(server_str, callback_data=f"select_{server_str}"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_servers"))
            bot.send_message(call.message.chat.id, "üåê –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
    elif call.data == "add_server":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∞–¥—Ä–µ—Å:–ø–æ—Ä—Ç")
        bot.register_next_step_handler(msg, process_add_server)
    elif call.data == "delete_server":
        if user_id in server_list and server_list[user_id]:
            markup = types.InlineKeyboardMarkup()
            for server in server_list[user_id]:
                server_str = f"{server['host']}:{server['port']}"
                markup.add(types.InlineKeyboardButton(server_str, callback_data=f"delete_{server_str}"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_servers"))
            bot.send_message(call.message.chat.id, "üåê –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
def process_add_server(message):
    user_id = message.from_user.id
    try:
        host, port = message.text.split(':')
        server_data = {"host": host, "port": int(port)}
        save_server(user_id, server_data)
        load_servers(user_id)
        bot.send_message(message.chat.id, f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {host}:{port}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∞–¥—Ä–µ—Å:–ø–æ—Ä—Ç")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("select_"))
def select_server(call):
    user_id = call.from_user.id
    server_str = call.data.replace("select_", "")
    host, port = server_str.split(':')
    server_list[user_id] = [{"host": host, "port": int(port)}]
    bot.send_message(call.message.chat.id, f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: {host}:{port}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def delete_server_callback(call):
    user_id = call.from_user.id
    server_str = call.data.replace("delete_", "")
    host, port = server_str.split(':')
    server_data = {"host": host, "port": int(port)}
    delete_server(user_id, server_data)
    load_servers(user_id)
    bot.send_message(call.message.chat.id, f"‚úÖ –°–µ—Ä–≤–µ—Ä —É–¥–∞–ª–µ–Ω: {host}:{port}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ChangeNick
@bot.message_handler(commands=['ChangeNick'])
def change_nick(message):
    msg = bot.send_message(message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫:")
    bot.register_next_step_handler(msg, process_nick_input)

def process_nick_input(message):
    user_id = message.from_user.id
    if user_id in server_list and server_list[user_id]:
        server_list[user_id][0]["username"] = message.text
        bot.send_message(message.chat.id, f"‚úÖ –ù–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {message.text}")
    else:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /Servers.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /SendMessage
@bot.message_handler(commands=['SendMessage'])
def send_message_menu(message):
    msg = bot.send_message(message.chat.id, "üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Minecraft:")
    bot.register_next_step_handler(msg, process_message_input)

def process_message_input(message):
    global mineBot
    if mineBot:
        try:
            mineBot.chat(message.text)
            bot.send_message(message.chat.id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Minecraft: {message.text}")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç Minecraft –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /BotStart.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /GetCoordinates
@bot.message_handler(commands=['GetCoordinates'])
def get_coordinates(message):
    global mineBot
    if mineBot:
        try:
            pos = mineBot.entity.position
            bot.send_message(message.chat.id, f"üìç –í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x={pos.x:.2f}, y={pos.y:.2f}, z={pos.z:.2f}")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç Minecraft –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /BotStart.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /GetPlayers
@bot.message_handler(commands=['GetPlayers'])
def get_players(message):
    global mineBot
    if mineBot:
        try:
            players = mineBot.players
            player_list = [player.username for player in players.values()]
            bot.send_message(message.chat.id, f"üë• –ò–≥—Ä–æ–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {', '.join(player_list)}")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤: {e}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç Minecraft –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /BotStart.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /GetStatus
@bot.message_handler(commands=['GetStatus'])
def get_status(message):
    global mineBot
    if mineBot:
        try:
            health = mineBot.health
            food = mineBot.food
            game_mode = mineBot.game.gameMode
            difficulty = mineBot.game.difficulty
            time_of_day = mineBot.time.timeOfDay
            bot.send_message(message.chat.id, f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ:\n"
                                             f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {health}\n"
                                             f"üçñ –ì–æ–ª–æ–¥: {food}\n"
                                             f"üéÆ –†–µ–∂–∏–º –∏–≥—Ä—ã: {game_mode}\n"
                                             f"‚öîÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}\n"
                                             f"‚è∞ –í—Ä–µ–º—è: {time_of_day}")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç Minecraft –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /BotStart.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è /Servers
@bot.callback_query_handler(func=lambda call: call.data == "back_to_servers")
def back_to_servers(call):
    servers_menu(call.message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)