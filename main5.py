import telebot
from telebot import types
from javascript import require, On
import time
import sqlite3
import json
import re

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = ''
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
mineflayer = require('mineflayer')

mineBot = None
server_list = {} 
last_message_time = {}  
track_chat = False  
chat_users = {}  

conn = sqlite3.connect('configs.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS configs
                  (user_id INTEGER, server_data TEXT, bot_username TEXT DEFAULT 'Bot')''')
conn.commit()

def get_bot_username(user_id):
    try:
        cursor.execute("SELECT bot_username FROM configs WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        return row[0] if row else 'Bot'  
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∏–∫–∞: {e}")
        return 'Bot'
    

def load_servers(user_id):
    cursor.execute("SELECT server_data FROM configs WHERE user_id = ?", (user_id,))
    rows = cursor.fetchall()
    
    if not rows:
        server_list[user_id] = []
        return
    
    try:
        servers = json.loads(rows[0][0])
        
        if isinstance(servers, list):
            server_list[user_id] = servers
        else:
            server_list[user_id] = [servers]
            
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        server_list[user_id] = []

def save_server(user_id, server_data):
    cursor.execute("SELECT server_data FROM configs WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    
    if row:
        servers = json.loads(row[0])
        servers.append(server_data)
        cursor.execute("UPDATE configs SET server_data = ? WHERE user_id = ?",
                      (json.dumps(servers), user_id))
    else:
        cursor.execute("INSERT INTO configs (user_id, server_data) VALUES (?, ?)",
                      (user_id, json.dumps([server_data])))
    conn.commit()

def delete_server(user_id, server_data):
    cursor.execute("DELETE FROM configs WHERE user_id = ? AND server_data = ?",
                   (user_id, json.dumps(server_data)))
    conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start', 'Help'])
def start(message):
    user_id = message.from_user.id
    load_servers(user_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('/BotStart üöÄ'))
    markup.add(types.KeyboardButton('/BotStop üõë'))
    markup.add(types.KeyboardButton('/Servers üåê'))
    markup.add(types.KeyboardButton('/ChangeNick üë§'))
    markup.add(types.KeyboardButton('/SendMessage üì®'))
    markup.add(types.KeyboardButton('/GetCoordinates üìç'))
    markup.add(types.KeyboardButton('/GetPlayers üë•'))
    markup.add(types.KeyboardButton('/GetStatus üìä'))
    markup.add(types.KeyboardButton('/Help ‚ùì'))

    come_mess = f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!'
    bot_comm = (
        'üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
        'üöÄ /BotStart - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n'
        'üõë /BotStop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞.\n'
        'üåê /Servers - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏.\n'
        'üë§ /ChangeNick - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –±–æ—Ç–∞.\n'
        'üì® /SendMessage - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.\n'
        'üìç /GetCoordinates - —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.\n'
        'üë• /GetPlayers - —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n'
        'üìä /GetStatus - —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n'
        '‚ùì /Help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.'
    )
    bot.send_message(message.chat.id, come_mess, reply_markup=markup)
    bot.send_message(message.chat.id, bot_comm, parse_mode='html')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /BotStart
@bot.message_handler(commands=['BotStart'])
def bot_start(message):
    global mineBot, Nick
    user_id = message.from_user.id
    load_servers(user_id)
    if user_id not in server_list or not server_list[user_id]:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /Servers.")
        return

    server = server_list[user_id][0]
    bot.send_message(message.chat.id, 'üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...')
    cursor.execute("SELECT bot_username FROM configs WHERE user_id = ?", (user_id,))
    rows = cursor.fetchall()
    print(rows)
    bot_username = get_bot_username(user_id)
    try:
        mineBot = mineflayer.createBot({
            'host': server["host"],
            'port': server["port"],
            'username': bot_username,
            'version': False
        })
        
        @On(mineBot, 'login')
        def handle_login(*args):
            bot.send_message(message.chat.id, '‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Minecraft!')
            last_message_time[user_id] = time.time()

        @On(mineBot, 'error')
        def handle_error(err, *args):
            bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
            print(str(err)[:200])
            mineBot = None

    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞')
        print(e)
        mineBot = None
    

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    @On(mineBot, 'error')
    def handle_error(err, *args):
        print(err)
    @On(mineBot, 'chat')
    def handle_chat(username, message, *args):
        if track_chat:
            for user_id in chat_users:
                bot.send_message(user_id, f"üí¨ <b>{username}</b>: {message}", parse_mode='html')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /BotStop
@bot.message_handler(commands=['BotStop'])
def bot_stop(message):
    global mineBot
    if mineBot:
        bot.send_message(message.chat.id, 'üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...')
        mineBot.quit()
        mineBot = None
        bot.send_message(message.chat.id, '‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
    else:
        bot.send_message(message.chat.id, '‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /Servers
@bot.message_handler(commands=['Servers'])
def servers_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üåê –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö", callback_data="select_server"))
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="add_server"))
    markup.add(types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="delete_server"))
    bot.send_message(message.chat.id, "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è /Servers
@bot.callback_query_handler(func=lambda call: call.data in ["select_server", "add_server", "delete_server"])

def servers_callback(call):
    user_id = call.from_user.id
    load_servers(user_id)
    if call.data == "select_server":
        if user_id in server_list and server_list[user_id]:
            markup = types.InlineKeyboardMarkup()
            for server in server_list[user_id]:
                server_str = f"{server['host']}:{server['port']}"
                markup.add(types.InlineKeyboardButton(server_str, callback_data=f"select_{server_str}"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_servers"))
            bot.send_message(call.message.chat.id, "üåê –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
    elif call.data == "add_server":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∞–¥—Ä–µ—Å:–ø–æ—Ä—Ç")
        bot.register_next_step_handler(msg, process_add_server)
    elif call.data == "delete_server":
        if user_id in server_list and server_list[user_id]:
            markup = types.InlineKeyboardMarkup()
            for server in server_list[user_id]:
                server_str = f"{server['host']}:{server['port']}"
                markup.add(types.InlineKeyboardButton(server_str, callback_data=f"delete_{server_str}"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_servers"))
            bot.send_message(call.message.chat.id, "üåê –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
def process_add_server(message):
    user_id = message.from_user.id
    try:
        host, port = message.text.split(':')
        server_data = {"host": host, "port": int(port)}
        save_server(user_id, server_data)
        bot.send_message(message.chat.id, f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {host}:{port}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∞–¥—Ä–µ—Å:–ø–æ—Ä—Ç")


    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("select_"))
def select_server(call):
    user_id = call.from_user.id
    server_str = call.data.replace("select_", "")
    host, port = server_str.split(':')
    server_list[user_id] = [{"host": host, "port": int(port)}]
    bot.send_message(call.message.chat.id, f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: {host}:{port}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
def delete_server(user_id, server_data):
    """–£–¥–∞–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    cursor.execute("SELECT server_data FROM configs WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    
    if not row or not row[0]:
        return False
    
    try:
        servers = json.loads(row[0])
        
        index_to_delete = None
        for i, server in enumerate(servers):
            if (str(server['host']) == str(server_data['host']) and 
                int(server['port']) == int(server_data['port'])):
                index_to_delete = i
                break
        
        if index_to_delete is not None:
            del servers[index_to_delete]
            
            cursor.execute("UPDATE configs SET server_data = ? WHERE user_id = ?",
                          (json.dumps(servers), user_id))
            conn.commit()
            return True
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    return False

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def delete_server_callback(call):
    user_id = call.from_user.id
    server_str = call.data.replace("delete_", "")
    
    try:
        host, port = server_str.split(':')
        server_data = {"host": host, "port": int(port)}
        
        if delete_server(user_id, server_data):
            load_servers(user_id)
            bot.send_message(call.message.chat.id, f"‚úÖ –°–µ—Ä–≤–µ—Ä —É–¥–∞–ª–µ–Ω: {host}:{port}")
        else:
            bot.send_message(call.message.chat.id, "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")
        print(f"–û—à–∏–±–∫–∞ –≤ delete_server_callback: {e}")

def update_bot_username(user_id, new_username):
    try:
        if not new_username or not new_username.strip():
            return False
            
        new_username = new_username.strip()[:16]
        
        cursor.execute("UPDATE configs SET bot_username = ? WHERE user_id = ?", 
                         (new_username, user_id))
        conn.commit()
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∏–∫–∞: {e}")
        conn.rollback()
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ChangeNick
@bot.message_handler(commands=['ChangeNick'])
def change_nick(message):
    global mineBot
    if mineBot:
        mineBot.quit()
        mineBot = None
    msg = bot.send_message(message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫ –¥–ª—è –±–æ—Ç–∞ (–º–∞–∫—Å. 16 —Å–∏–º–≤–æ–ª–æ–≤):")
    bot.register_next_step_handler(msg, process_nick_input)

def process_nick_input(message):
    user_id = message.from_user.id
    new_username = message.text
    
    if update_bot_username(user_id, new_username):
        bot.send_message(message.chat.id, f"‚úÖ –ù–∏–∫ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_username}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /SendMessage
@bot.message_handler(commands=['SendMessage'])
def send_message_menu(message):
    msg = bot.send_message(message.chat.id, "üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Minecraft:")
    bot.register_next_step_handler(msg, process_message_input)

def process_message_input(message):
    global mineBot
    if mineBot:
        try:
            mineBot.chat(message.text)
            bot.send_message(message.chat.id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Minecraft: {message.text}")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç Minecraft –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /BotStart.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /GetCoordinates
@bot.message_handler(commands=['GetCoordinates'])
def get_coordinates(message):
    global mineBot
    if mineBot:
        try:
            pos = mineBot.entity.position
            bot.send_message(message.chat.id, f"üìç –í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x={pos.x:.2f}, y={pos.y:.2f}, z={pos.z:.2f}")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç Minecraft –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /BotStart.")



def extract_usernames_from_text(data_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    pattern = r"username: '([^']+)'"
    return re.findall(pattern, data_text)

@bot.message_handler(commands=['GetPlayers'])
def get_players(message):
    global mineBot

    if not mineBot:
        bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /BotStart.")
        return

    try:
        players_text = str(mineBot.players)
        
        player_names = extract_usernames_from_text(players_text)
        
        unique_names = list(set(player_names))
        
        markup = types.InlineKeyboardMarkup()
        for name in unique_names:
            markup.add(types.InlineKeyboardButton(name, callback_data='ignore'))

        if unique_names:
            bot.send_message(message.chat.id, "üë• –ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "üî¥ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤")

    except Exception as e:
        error_msg = str(e)[:300]
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /GetStatus
@bot.message_handler(commands=['GetStatus'])
def get_status(message):
    global mineBot
    if mineBot:
        try:
            health = mineBot.health
            food = mineBot.food
            game_mode = mineBot.game.gameMode
            difficulty = mineBot.game.difficulty
            time_of_day = mineBot.time.timeOfDay
            bot.send_message(message.chat.id, f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ:\n"
                                             f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {health}\n"
                                             f"üçñ –ì–æ–ª–æ–¥: {food}\n"
                                             f"üéÆ –†–µ–∂–∏–º –∏–≥—Ä—ã: {game_mode}\n"
                                             f"‚öîÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}\n"
                                             f"‚è∞ –í—Ä–µ–º—è: {time_of_day}")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç Minecraft –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /BotStart.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è /Servers
@bot.callback_query_handler(func=lambda call: call.data == "back_to_servers")
def back_to_servers(call):
    servers_menu(call.message)

bot.polling(none_stop=True)
